/*
 * This file is generated by jOOQ.
 */
package org.dazai.booksourcing.main.domain.db;


import org.dazai.booksourcing.main.domain.db.tables.Book;
import org.dazai.booksourcing.main.domain.db.tables.ExchangeRequest;
import org.dazai.booksourcing.main.domain.db.tables.FlywaySchemaHistory;
import org.dazai.booksourcing.main.domain.db.tables.Publication;
import org.dazai.booksourcing.main.domain.db.tables.UserProfile;
import org.dazai.booksourcing.main.domain.db.tables.records.BookRecord;
import org.dazai.booksourcing.main.domain.db.tables.records.ExchangeRequestRecord;
import org.dazai.booksourcing.main.domain.db.tables.records.FlywaySchemaHistoryRecord;
import org.dazai.booksourcing.main.domain.db.tables.records.PublicationRecord;
import org.dazai.booksourcing.main.domain.db.tables.records.UserProfileRecord;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * DEFAULT_SCHEMA.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<BookRecord> PK_BOOK = Internal.createUniqueKey(Book.BOOK, DSL.name("pk_book"), new TableField[] { Book.BOOK.ID }, true);
    public static final UniqueKey<ExchangeRequestRecord> PK_EXCHANGE_REQUEST = Internal.createUniqueKey(ExchangeRequest.EXCHANGE_REQUEST, DSL.name("pk_exchange_request"), new TableField[] { ExchangeRequest.EXCHANGE_REQUEST.ID }, true);
    public static final UniqueKey<FlywaySchemaHistoryRecord> PK_FLYWAY_SCHEMA_HISTORY = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, DSL.name("pk_flyway_schema_history"), new TableField[] { FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK }, true);
    public static final UniqueKey<PublicationRecord> PK_PUBLICATION = Internal.createUniqueKey(Publication.PUBLICATION, DSL.name("pk_publication"), new TableField[] { Publication.PUBLICATION.ID }, true);
    public static final UniqueKey<UserProfileRecord> PK_USER_PROFILE = Internal.createUniqueKey(UserProfile.USER_PROFILE, DSL.name("pk_user_profile"), new TableField[] { UserProfile.USER_PROFILE.ID }, true);
}
