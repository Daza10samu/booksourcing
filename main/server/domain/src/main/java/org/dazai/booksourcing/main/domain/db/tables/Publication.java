/*
 * This file is generated by jOOQ.
 */
package org.dazai.booksourcing.main.domain.db.tables;


import java.time.Instant;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.dazai.booksourcing.main.domain.db.DefaultSchema;
import org.dazai.booksourcing.main.domain.db.Indexes;
import org.dazai.booksourcing.main.domain.db.Keys;
import org.dazai.booksourcing.main.domain.db.tables.records.PublicationRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import tech.ydb.jooq.binding.TimestampBinding;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Publication extends TableImpl<PublicationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>DEFAULT_SCHEMA.publication</code>
     */
    public static final Publication PUBLICATION = new Publication();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PublicationRecord> getRecordType() {
        return PublicationRecord.class;
    }

    /**
     * The column <code>DEFAULT_SCHEMA.publication.id</code>.
     */
    public final TableField<PublicationRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>DEFAULT_SCHEMA.publication.offered_book_id</code>.
     */
    public final TableField<PublicationRecord, Long> OFFERED_BOOK_ID = createField(DSL.name("offered_book_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>DEFAULT_SCHEMA.publication.owner_id</code>.
     */
    public final TableField<PublicationRecord, Long> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>DEFAULT_SCHEMA.publication.offer_details</code>.
     */
    public final TableField<PublicationRecord, String> OFFER_DETAILS = createField(DSL.name("offer_details"), SQLDataType.VARCHAR(4194304).nullable(false), this, "");

    /**
     * The column <code>DEFAULT_SCHEMA.publication.status</code>.
     */
    public final TableField<PublicationRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(4194304).nullable(false), this, "");

    /**
     * The column <code>DEFAULT_SCHEMA.publication.created_date</code>.
     */
    public final TableField<PublicationRecord, Instant> CREATED_DATE = createField(DSL.name("created_date"), SQLDataType.LOCALDATETIME(26).nullable(false), this, "", new TimestampBinding());

    private Publication(Name alias, Table<PublicationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Publication(Name alias, Table<PublicationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>DEFAULT_SCHEMA.publication</code> table reference
     */
    public Publication(String alias) {
        this(DSL.name(alias), PUBLICATION);
    }

    /**
     * Create an aliased <code>DEFAULT_SCHEMA.publication</code> table reference
     */
    public Publication(Name alias) {
        this(alias, PUBLICATION);
    }

    /**
     * Create a <code>DEFAULT_SCHEMA.publication</code> table reference
     */
    public Publication() {
        this(DSL.name("publication"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PUBLICATION__OFFERED_BOOK_ID__IDX, Indexes.PUBLICATION__OFFERED_BOOK_ID__OWNER_ID__STATUS__IDX, Indexes.PUBLICATION__OWNER_ID__IDX, Indexes.PUBLICATION__STATUS__IDX);
    }

    @Override
    public UniqueKey<PublicationRecord> getPrimaryKey() {
        return Keys.PK_PUBLICATION;
    }

    @Override
    public Publication as(String alias) {
        return new Publication(DSL.name(alias), this);
    }

    @Override
    public Publication as(Name alias) {
        return new Publication(alias, this);
    }

    @Override
    public Publication as(Table<?> alias) {
        return new Publication(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Publication rename(String name) {
        return new Publication(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Publication rename(Name name) {
        return new Publication(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Publication rename(Table<?> name) {
        return new Publication(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Publication where(Condition condition) {
        return new Publication(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Publication where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Publication where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Publication where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Publication where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Publication where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Publication where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Publication where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Publication whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Publication whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
