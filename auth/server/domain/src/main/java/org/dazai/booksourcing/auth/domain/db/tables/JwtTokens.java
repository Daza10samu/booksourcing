/*
 * This file is generated by jOOQ.
 */
package org.dazai.booksourcing.auth.domain.db.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.dazai.booksourcing.auth.domain.db.DefaultSchema;
import org.dazai.booksourcing.auth.domain.db.Indexes;
import org.dazai.booksourcing.auth.domain.db.Keys;
import org.dazai.booksourcing.auth.domain.db.tables.records.JwtTokensRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JwtTokens extends TableImpl<JwtTokensRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>DEFAULT_SCHEMA.jwt_tokens</code>
     */
    public static final JwtTokens JWT_TOKENS = new JwtTokens();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JwtTokensRecord> getRecordType() {
        return JwtTokensRecord.class;
    }

    /**
     * The column <code>DEFAULT_SCHEMA.jwt_tokens.jwt_token</code>.
     */
    public final TableField<JwtTokensRecord, String> JWT_TOKEN = createField(DSL.name("jwt_token"), SQLDataType.VARCHAR(4194304).nullable(false), this, "");

    /**
     * The column <code>DEFAULT_SCHEMA.jwt_tokens.expiration_ts</code>.
     */
    public final TableField<JwtTokensRecord, Long> EXPIRATION_TS = createField(DSL.name("expiration_ts"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>DEFAULT_SCHEMA.jwt_tokens.user_id</code>.
     */
    public final TableField<JwtTokensRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>DEFAULT_SCHEMA.jwt_tokens.type</code>.
     */
    public final TableField<JwtTokensRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(4194304).nullable(false), this, "");

    /**
     * The column <code>DEFAULT_SCHEMA.jwt_tokens.revoked</code>.
     */
    public final TableField<JwtTokensRecord, Boolean> REVOKED = createField(DSL.name("revoked"), SQLDataType.BOOLEAN.nullable(false), this, "");

    private JwtTokens(Name alias, Table<JwtTokensRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JwtTokens(Name alias, Table<JwtTokensRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>DEFAULT_SCHEMA.jwt_tokens</code> table reference
     */
    public JwtTokens(String alias) {
        this(DSL.name(alias), JWT_TOKENS);
    }

    /**
     * Create an aliased <code>DEFAULT_SCHEMA.jwt_tokens</code> table reference
     */
    public JwtTokens(Name alias) {
        this(alias, JWT_TOKENS);
    }

    /**
     * Create a <code>DEFAULT_SCHEMA.jwt_tokens</code> table reference
     */
    public JwtTokens() {
        this(DSL.name("jwt_tokens"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.JWT_TOKENS__REVOKED__IDX, Indexes.JWT_TOKENS__USER_ID__IDX);
    }

    @Override
    public UniqueKey<JwtTokensRecord> getPrimaryKey() {
        return Keys.PK_JWT_TOKENS;
    }

    @Override
    public JwtTokens as(String alias) {
        return new JwtTokens(DSL.name(alias), this);
    }

    @Override
    public JwtTokens as(Name alias) {
        return new JwtTokens(alias, this);
    }

    @Override
    public JwtTokens as(Table<?> alias) {
        return new JwtTokens(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JwtTokens rename(String name) {
        return new JwtTokens(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JwtTokens rename(Name name) {
        return new JwtTokens(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JwtTokens rename(Table<?> name) {
        return new JwtTokens(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JwtTokens where(Condition condition) {
        return new JwtTokens(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JwtTokens where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JwtTokens where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JwtTokens where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JwtTokens where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JwtTokens where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JwtTokens where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JwtTokens where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JwtTokens whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JwtTokens whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
